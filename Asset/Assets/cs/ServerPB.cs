// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerPB.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ProtoMsg {

  #region Messages
  public sealed class ServerGetRecommendC2S : pb::IMessage {
    private static readonly pb::MessageParser<ServerGetRecommendC2S> _parser = new pb::MessageParser<ServerGetRecommendC2S>(() => new ServerGetRecommendC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerGetRecommendC2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class ServerGetRecommendS2C : pb::IMessage {
    private static readonly pb::MessageParser<ServerGetRecommendS2C> _parser = new pb::MessageParser<ServerGetRecommendS2C>(() => new ServerGetRecommendS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerGetRecommendS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "ServerInfo" field.</summary>
    public const int ServerInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ProtoMsg.ServerInfo> _repeated_serverInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ProtoMsg.ServerInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoMsg.ServerInfo> serverInfo_ = new pbc::RepeatedField<global::ProtoMsg.ServerInfo>();
    /// <summary>
    ///推荐的区服列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoMsg.ServerInfo> ServerInfo {
      get { return serverInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serverInfo_.WriteTo(output, _repeated_serverInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serverInfo_.CalculateSize(_repeated_serverInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serverInfo_.AddEntriesFrom(input, _repeated_serverInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ServerSelectC2S : pb::IMessage {
    private static readonly pb::MessageParser<ServerSelectC2S> _parser = new pb::MessageParser<ServerSelectC2S>(() => new ServerSelectC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSelectC2S> Parser { get { return _parser; } }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 1;
    private int serverID_;
    /// <summary>
    ///服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ServerSelectS2C : pb::IMessage {
    private static readonly pb::MessageParser<ServerSelectS2C> _parser = new pb::MessageParser<ServerSelectS2C>(() => new ServerSelectS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSelectS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 1;
    private int serverID_;
    /// <summary>
    ///服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    /// <summary>
    ///结果:0登录成功 1该区维护中 2该区未开放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerID);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerID = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ServerGetCustomC2S : pb::IMessage {
    private static readonly pb::MessageParser<ServerGetCustomC2S> _parser = new pb::MessageParser<ServerGetCustomC2S>(() => new ServerGetCustomC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerGetCustomC2S> Parser { get { return _parser; } }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 1;
    private int position_;
    /// <summary>
    ///地理位置 0华南
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ServerGetCustomS2C : pb::IMessage {
    private static readonly pb::MessageParser<ServerGetCustomS2C> _parser = new pb::MessageParser<ServerGetCustomS2C>(() => new ServerGetCustomS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerGetCustomS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 1;
    private int position_;
    /// <summary>
    ///地理位置 0华南
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "ServerInfo" field.</summary>
    public const int ServerInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ProtoMsg.ServerInfo> _repeated_serverInfo_codec
        = pb::FieldCodec.ForMessage(18, global::ProtoMsg.ServerInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoMsg.ServerInfo> serverInfo_ = new pbc::RepeatedField<global::ProtoMsg.ServerInfo>();
    /// <summary>
    ///服务器列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoMsg.ServerInfo> ServerInfo {
      get { return serverInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Position);
      }
      serverInfo_.WriteTo(output, _repeated_serverInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      size += serverInfo_.CalculateSize(_repeated_serverInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadInt32();
            break;
          }
          case 18: {
            serverInfo_.AddEntriesFrom(input, _repeated_serverInfo_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
