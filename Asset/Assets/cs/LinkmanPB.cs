// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LinkmanPB.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ProtoMsg {

  #region Messages
  public sealed class LinkmanGetListC2S : pb::IMessage {
    private static readonly pb::MessageParser<LinkmanGetListC2S> _parser = new pb::MessageParser<LinkmanGetListC2S>(() => new LinkmanGetListC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkmanGetListC2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class LinkmanGetListS2C : pb::IMessage {
    private static readonly pb::MessageParser<LinkmanGetListS2C> _parser = new pb::MessageParser<LinkmanGetListS2C>(() => new LinkmanGetListS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkmanGetListS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///结果:0获取成功 1未有好友
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "LinkmanInfo" field.</summary>
    public const int LinkmanInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ProtoMsg.LinkmanInfo> _repeated_linkmanInfo_codec
        = pb::FieldCodec.ForMessage(18, global::ProtoMsg.LinkmanInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoMsg.LinkmanInfo> linkmanInfo_ = new pbc::RepeatedField<global::ProtoMsg.LinkmanInfo>();
    /// <summary>
    ///联系人列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoMsg.LinkmanInfo> LinkmanInfo {
      get { return linkmanInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      linkmanInfo_.WriteTo(output, _repeated_linkmanInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      size += linkmanInfo_.CalculateSize(_repeated_linkmanInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            linkmanInfo_.AddEntriesFrom(input, _repeated_linkmanInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class LinkmanAddFriendC2S : pb::IMessage {
    private static readonly pb::MessageParser<LinkmanAddFriendC2S> _parser = new pb::MessageParser<LinkmanAddFriendC2S>(() => new LinkmanAddFriendC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkmanAddFriendC2S> Parser { get { return _parser; } }

    /// <summary>Field number for the "LinkmanInfo" field.</summary>
    public const int LinkmanInfoFieldNumber = 1;
    private global::ProtoMsg.LinkmanInfo linkmanInfo_;
    /// <summary>
    ///填写自己ID 好友ID 关系1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMsg.LinkmanInfo LinkmanInfo {
      get { return linkmanInfo_; }
      set {
        linkmanInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (linkmanInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LinkmanInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (linkmanInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkmanInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (linkmanInfo_ == null) {
              linkmanInfo_ = new global::ProtoMsg.LinkmanInfo();
            }
            input.ReadMessage(linkmanInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class LinkmanAddFriendS2C : pb::IMessage {
    private static readonly pb::MessageParser<LinkmanAddFriendS2C> _parser = new pb::MessageParser<LinkmanAddFriendS2C>(() => new LinkmanAddFriendS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkmanAddFriendS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "LinkmanInfo" field.</summary>
    public const int LinkmanInfoFieldNumber = 1;
    private global::ProtoMsg.LinkmanInfo linkmanInfo_;
    /// <summary>
    ///返回操作的源数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMsg.LinkmanInfo LinkmanInfo {
      get { return linkmanInfo_; }
      set {
        linkmanInfo_ = value;
      }
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    /// <summary>
    ///结果:0成功 1失败:已经是好友
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (linkmanInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LinkmanInfo);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (linkmanInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkmanInfo);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (linkmanInfo_ == null) {
              linkmanInfo_ = new global::ProtoMsg.LinkmanInfo();
            }
            input.ReadMessage(linkmanInfo_);
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class LinkmanResponseAddC2S : pb::IMessage {
    private static readonly pb::MessageParser<LinkmanResponseAddC2S> _parser = new pb::MessageParser<LinkmanResponseAddC2S>(() => new LinkmanResponseAddC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkmanResponseAddC2S> Parser { get { return _parser; } }

    /// <summary>Field number for the "TargetID" field.</summary>
    public const int TargetIDFieldNumber = 1;
    private int targetID_;
    /// <summary>
    ///目标角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    /// <summary>Field number for the "CMD" field.</summary>
    public const int CMDFieldNumber = 2;
    private int cMD_;
    /// <summary>
    ///操作:0同意添加(需要给目标ID发送80) 1取消添加 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CMD {
      get { return cMD_; }
      set {
        cMD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetID);
      }
      if (CMD != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CMD);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetID);
      }
      if (CMD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CMD);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetID = input.ReadInt32();
            break;
          }
          case 16: {
            CMD = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class LinkmanResponseAddS2C : pb::IMessage {
    private static readonly pb::MessageParser<LinkmanResponseAddS2C> _parser = new pb::MessageParser<LinkmanResponseAddS2C>(() => new LinkmanResponseAddS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkmanResponseAddS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///结果:0发送成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
